columnNames <- ls(pattern = 'predictors')
no_of_varselect <- length(columnNames)
list(BostonHousing) %>%
rep(no_of_varselect) %>%
enframe(name = 'id', value = 'data') %>%
mutate(columnNames = columnNames) -> starter_df
rpartModel <- function(X, Y) {
ctrl <- trainControl(
## 5-fold CV
method = "repeatedcv",
number = 5
)
train(
x = X,
y = Y,
method = 'rpart2',
trControl = ctrl,
tuneGrid = data.frame(maxdepth=c(2,3,4,5)),
preProc = c('center', 'scale')
)
}
xgbTreeModel <- function(X,Y){
ctrl <- trainControl(
## 5-fold CV
method = "repeatedcv",
number = 5
)
train(
x=X,
y=Y,
method = 'xgbTree',
trControl = ctrl,
tuneGrid = expand.grid(nrounds = c(200),
max_depth = c(2) ,
eta = c(0.1),
gamma = 1,
colsample_bytree = 1,
min_child_weight = 1,
subsample = 1),
preProc = c('center', 'scale')
)
}
model_list <- list(rpartModel=rpartModel,
xgbModel=xgbTreeModel) %>%
enframe(name = 'modelName',value = 'model')
model_list
df.train <-
starter_df[rep(1:nrow(starter_df),nrow(model_list)),]
df.train <- df.train %>%
bind_cols(
model_list[rep(1:nrow(model_list),nrow(starter_df)),] %>% arrange(modelName)
) %>%
mutate(id=1:nrow(.))
x[,(colnames(x) %in% eval(parse(text=y)))]
filterColumns <- function(x,y){
x[,(colnames(x) %in% eval(parse(text=y)))]
}
df.train %<>%
mutate(
train.X = map2(data, columnNames,  ~ filterColumns(.x, .y)),
train.Y = map(data, ~ .x$medv)
) %>%
dplyr::select(-data) %>%
mutate(params = map2(train.X, train.Y,  ~ list(X = .x, Y = .y)))
df.train
?invoke_map
df.train
df.train %<>%
mutate(
modelFits=invoke_map(model,params)
)
BostonHousing
library(tidyverse)
library(magrittr)
library(purrr)
library(caret)
library(mlbench)
data("BostonHousing")
response <- 'medv'
predictors.original <- colnames(BostonHousing[,1:13])
prepTrain <- preProcess(x = BostonHousing[,predictors.original], method = c('BoxCox'))
boxcoxed <- predict(prepTrain,newdata = BostonHousing[,predictors.original])
colnames(boxcoxed) <- paste0(colnames(boxcoxed),'.boxed')
predictors.boxcoxed <- colnames(boxcoxed)
squared <- (BostonHousing[,c(1:3,5:13)])^2
colnames(squared) <- paste0(colnames(squared),'.sq')
predictors.sq <- colnames(squared)
BostonHousing %<>%
cbind(boxcoxed,squared)
BostonHousing %<>%
map_df(.f = ~as.numeric(.x)) %>%
as.data.frame()
glimpse(BostonHousing)
class(BostonHousing)
columnNames <- ls(pattern = 'predictors')
no_of_varselect <- length(columnNames)
list(BostonHousing) %>%
rep(no_of_varselect) %>%
enframe(name = 'id', value = 'data') %>%
mutate(columnNames = columnNames) -> starter_df
starter_df
rpartModel <- function(X, Y) {
ctrl <- trainControl(
## 5-fold CV
method = "repeatedcv",
number = 5
)
train(
x = X,
y = Y,
method = 'rpart2',
trControl = ctrl,
tuneGrid = data.frame(maxdepth=c(2,3,4,5)),
preProc = c('center', 'scale')
)
}
xgbTreeModel <- function(X,Y){
ctrl <- trainControl(
## 5-fold CV
method = "repeatedcv",
number = 5
)
train(
x=X,
y=Y,
method = 'xgbTree',
trControl = ctrl,
tuneGrid = expand.grid(nrounds = c(200),
max_depth = c(2) ,
eta = c(0.1),
gamma = 1,
colsample_bytree = 1,
min_child_weight = 1,
subsample = 1),
preProc = c('center', 'scale')
)
}
model_list <- list(rpartModel=rpartModel,
xgbModel=xgbTreeModel) %>%
enframe(name = 'modelName',value = 'model')
model_list
df.train <-
starter_df[rep(1:nrow(starter_df),nrow(model_list)),]
df.train <- df.train %>%
bind_cols(
model_list[rep(1:nrow(model_list),nrow(starter_df)),] %>% arrange(modelName)
) %>%
mutate(id=1:nrow(.))
filterColumns <- function(x,y){
x[,(colnames(x) %in% eval(parse(text=y)))]
}
df.train %<>%
mutate(
train.X = map2(data, columnNames,  ~ filterColumns(.x, .y)),
train.Y = map(data, ~ .x$medv)
) %>%
dplyr::select(-data) %>%
mutate(params = map2(train.X, train.Y,  ~ list(X = .x, Y = .y)))
df.train %<>%
mutate(
modelFits=invoke_map(model,params)
)
# modelFits=invoke_map(model,params)) -> dout
# Rsq=map_dbl(modelFits,~.x$results$Rsquared),
# RMSE=map_dbl(modelFits,~.x$results$RMSE)) -> dout
df.train
df.train %>% mutate(Rsq=map_dbl(modelFits,~.x$results$Rsquared))
df.train %>% mutate(Rsq=map_dbl(modelFits,~.x$bestmodel$results$Rsquared))
df.train$modelFits[1]
df.train$modelFits[[1]]
df.train$modelFits[[1]]$bestTune
df.train$modelFits[[1]]$metric
df.train$modelFits[[1]]$modelInfo
df.train$modelFits[[1]]$pred
df.train$modelFits[[1]]$finalModel
df.train$modelFits[[1]]$finalModel$cptable
df.train$modelFits[[1]]$finalModel
df.train$modelFits[[1]]$preProcess
df.train$modelFits[[1]]
df.train$modelFits[[1]] %>% plot
df.train$modelFits[[1]]$results
df.train$modelFits[[1]]$results$Rsquared
df.train$modelFits[[1]]$dots
df.train$modelFits[[1]]$finalModel
df.train$modelFits[[1]]$finalModel$tuneValue
df.train$modelFits[[1]]$finalModel$param
df.train$modelFits[[1]]$finalModel$terms
df.train$modelFits[[1]]$finalModel$variable.importance
df.train$modelFits[[1]]
df.train$modelFits[[1]]$resampledCM
df.train$modelFits[[1]]$resample
df.train$modelFits[[1]]$resample$RMSE
df.train$modelFits[[1]]$resample$RMSE %>% max
df.train$modelFits[[2]]
df.train$modelFits[[4]]
df.train$modelFits[[4]]$finalModel
df.train$modelFits[[4]]$bestTune
df.train$modelFits[[4]]$maximize
df.train$modelFits[[4]]$modelInfo
df.train$modelFits[[4]]$method
df.train$modelFits[[4]]$metric
df.train$modelFits[[4]]$results
df.train$modelFits[[4]]$results$RMSE
df.train$modelFits[[1]]$results$RMSE
df.train$modelFits[[2]]$results$RMSE
df.train$modelFits[[3]]$results$RMSE
df.train$modelFits[[3]]$results$RMSE %>% max
df.train$modelFits %>% map_dbl(.f = max(.x$results$RMSE))
df.train$modelFits %>% map_dbl(.x = .,.f = max(.x$results$RMSE))
df.train %>% map_dbl(.x = .$modelFits,.f = max(.x$results$RMSE))
map_dbl(.x = df.train$modelFits,.f = max(.x$results$RMSE))
df.train$modelFits %>% map_dbl(.f = ~max(.x$results$RMSE))
df.train %<>%
mutate(
modelFits=invoke_map(model,params),
RMSE=map_dbl(modelFits,~max(.x$results$RMSE)))
df.train
df.train %<>%
mutate(
modelFits=invoke_map(model,params),
RMSE=map_dbl(modelFits,~max(.x$results$RMSE)),
Rsq=map_dbl(modelFits,~max(.x$results$RSquared))
)
df.train$modelFits[[1]]$results$RMSESD
df.train %<>%
mutate(
modelFits=invoke_map(model,params),
RMSE=map_dbl(modelFits,~max(.x$results$RMSE)),
RMSESD=map_dbl(modelFits,~max(.x$results$RMSESD)),
Rsq=map_dbl(modelFits,~max(.x$results$Rsquared))
)
df.train
df.train %<>%
mutate(
modelFits=invoke_map(model,params),
RMSE=map_dbl(modelFits,~max(.x$results$RMSE)),
RMSESD=map_dbl(modelFits,~max(.x$results$RMSESD)),
Rsq=map_dbl(modelFits,~max(.x$results$Rsquared)),
bestTune=map(modelFits,~.x$besttune)
)
df.train
df.train %>% glimpse
df.train %>% str
df.train %<>%
mutate(
modelFits=invoke_map(model,params),
RMSE=map_dbl(modelFits,~max(.x$results$RMSE)),
RMSESD=map_dbl(modelFits,~max(.x$results$RMSESD)),
Rsq=map_dbl(modelFits,~max(.x$results$Rsquared)),
bestTune=map(modelFits,~.x$bestTune)
)
df.train
df.train$bestTune
response <- 'medv'
predictors.original <- colnames(BostonHousing[,1:13])
prepTrain <- preProcess(x = BostonHousing[,predictors.original], method = c('BoxCox'))
boxcoxed <- predict(prepTrain,newdata = BostonHousing[,predictors.original])
colnames(boxcoxed) <- paste0(colnames(boxcoxed),'.boxed')
predictors.boxcoxed <- colnames(boxcoxed)
squared <- (BostonHousing[,c(1:3,5:13)])^2
colnames(squared) <- paste0(colnames(squared),'.sq')
predictors.sq <- colnames(squared)
BostonHousing %<>%
cbind(boxcoxed,squared)
BostonHousing %<>%
map_df(.f = ~as.numeric(.x)) %>%
as.data.frame()
glimpse(BostonHousing)
head(BostonHousing)
class(predictors.boxcoxed)
library(tidyverse)
library(magrittr)
library(purrr)
library(caret)
library(mlbench)
library(tidyr)
library(dplyr)
library(magrittr)
library(purrr)
library(caret)
library(mlbench)
data("BostonHousing")
# The originals
response <- 'medv'
predictors.original <- colnames(BostonHousing[,1:13])
# Box-Cox transformation
prepTrain <- preProcess(x = BostonHousing[,predictors.original], method = c('BoxCox'))
boxcoxed <- predict(prepTrain,newdata = BostonHousing[,predictors.original])
colnames(boxcoxed) <- paste0(colnames(boxcoxed),'.boxed')
predictors.boxcoxed <- colnames(boxcoxed)
# Squaring
squared <- (BostonHousing[,c(1:3,5:13)])^2
colnames(squared) <- paste0(colnames(squared),'.sq')
predictors.sq <- colnames(squared)
# All together now...
BostonHousing %<>%
cbind(boxcoxed,squared)
# Make sure everything is a numerical (for xgboost to work), and also NOT a tibble (some caret functions have trouble with tibbles)
BostonHousing %<>%
map_df(.f = ~as.numeric(.x)) %>% as.data.frame()
glimpse(BostonHousing)
columnNames
cat(columnNames)
print(columnNames)
columnNames <- ls(pattern = 'predictors')
print(columnNames)
devtools::install_github("rstudio/blogdown")
blogdown::install_hugo()
blogdown::update_hugo()
set_names(1:4, c("a", "b", "c", "d"))
library(purrr)
set_names(1:4, c("a", "b", "c", "d"))
?plot.hclust
?corrplot
??corrplot
install.packages("corrplot")
corrplot::corrplot()
?corrplot
install.packages("keras")
library(readr)
library(tidyverse)
let <- read_csv('letters.csv')[,-1]
colnames(let) <- paste0('C',seq_len(81))
rownames(let) <- LETTERS
let <- as.matrix(let)
let
hclust(dist(let),method = 'ward.D') -> let.clust
as.hclust(x = let.clust) %>% as.dendrogram() %>% plot
let.clust$order
library(readr)
library(tidyverse)
let <- read_csv('letters.csv')[,-1]
setwd("~/Documents/OneDrive/MSPA/490/Github")
library(readr)
library(tidyverse)
let <- read_csv('letters.csv')[,-1]
colnames(let) <- paste0('C',seq_len(81))
rownames(let) <- LETTERS
let <- as.matrix(let)
let
hclust(dist(let),method = 'ward.D') -> let.clust
as.hclust(x = let.clust) %>% as.dendrogram() %>% plot
let.clust$order
dataset <- read_csv("hidden.csv")
dataset %>%
tbl_df -> dataset
dataset <- reshape2::melt(dataset,'X1')
colnames(dataset) <- c('HiddenNode','Letter','Activation')
dataset$Letter <- factor(dataset$Letter,
levels = LETTERS[let.clust$order])
dataset$HiddenNode <- as.factor(dataset$HiddenNode)
dataset %>%
ggplot(aes(x=Letter,y=HiddenNode))+
geom_tile(aes(fill=Activation))
dataset %>%
ggplot(aes(x=Letter,y=HiddenNode))+
geom_tile(aes(fill=Activation))+
geom_vline(xintercept = c(2,4,5))
let.clust
as.hclust(x = let.clust) %>% as.dendrogram() %>% plot
abline(h=3)
abline(h=3,lty=2,col='red')
as.hclust(x = let.clust) %>% as.dendrogram() %>% plot
abline(h=3,lty=2,col='red')
abline(h=6,lty=2,col='red')
abline(h=6.5,lty=2,col='red')
as.hclust(x = let.clust) %>% as.dendrogram() %>% plot
abline(h=6.2,lty=2,col='red')
as.hclust(x = let.clust) %>% as.dendrogram() %>% plot
abline(h=6.3,lty=2,col='red')
abline(h=5.8,lty=2,col='red')
abline(h=5.6,lty=2,col='red')
as.hclust(x = let.clust) %>% as.dendrogram() %>% plot
abline(h=5.6,lty=2,col='red')
as.hclust(x = let.clust) %>% as.dendrogram() %>%
set(k=5) %>% plot
install.packages('dendextend')
library(dendextend)
as.hclust(x = let.clust) %>%
as.dendrogram() %>%
set(k=5) %>% plot
abline(h=5.6,lty=2,col='red')
as.hclust(x = let.clust) %>%
as.dendrogram() %>%
set(k=5) %>% plot
as.hclust(x = let.clust) %>%
as.dendrogram() %>%
set("labels_col",k=5) %>% plot
as.hclust(x = let.clust) %>%
as.dendrogram() %>%
set("labels_col",k=7) %>% plot
as.hclust(x = let.clust) %>%
as.dendrogram() %>%
set("labels_col",k=7) %>%
set("labels_cex", 2) %>% plot
as.hclust(x = let.clust) %>%
as.dendrogram() %>%
set("labels_col",k=7) %>%
set("labels_cex", 1.6) %>% plot
as.hclust(x = let.clust) %>%
as.dendrogram() %>%
set("labels_col",k=8) %>%
set("labels_cex", 1.6) %>% plot
hclust(dist(let),method = 'ward.D2') -> let.clust
as.hclust(x = let.clust) %>%
as.dendrogram() %>%
set("labels_col",k=8) %>%
set("labels_cex", 1.6) %>% plot
hclust(dist(let),method = 'average') -> let.clust
as.hclust(x = let.clust) %>%
as.dendrogram() %>%
set("labels_col",k=8) %>%
set("labels_cex", 1.6) %>% plot
hclust(dist(let),method = 'ward.D2') -> let.clust
as.hclust(x = let.clust) %>%
as.dendrogram() %>%
set("labels_col",k=8) %>%
set("labels_cex", 1.6) %>% plot
?hclust
hclust(dist(let),method = 'mcquitty') -> let.clust
as.hclust(x = let.clust) %>%
as.dendrogram() %>%
set("labels_col",k=8) %>%
set("labels_cex", 1.6) %>% plot
hclust(dist(let),method = 'centroid') -> let.clust
as.hclust(x = let.clust) %>%
as.dendrogram() %>%
set("labels_col",k=8) %>%
set("labels_cex", 1.6) %>% plot
hclust(dist(let),method = 'ward.D2') -> let.clust
as.hclust(x = let.clust) %>%
as.dendrogram() %>%
set("labels_col",k=8) %>%
set("labels_cex", 1.6) %>% plot
as.hclust(x = let.clust) %>%
as.dendrogram() %>%
set("labels_col",k=8) %>%
set("labels_cex", 1.6) %>% plot(main='Ward-D2 H-clustering')
as.hclust(x = let.clust) %>%
as.dendrogram() %>%
set("labels_col",k=8) %>%
set("labels_cex", 1.6) %>% plot(main='Ward-D2 H-Clustering on 81x1 letter arrays')
as.hclust(x = let.clust) %>%
as.dendrogram() %>%
set("labels_col",k=8) %>%
set("labels_cex", 1.6) %>% plot(main='Ward-D2 H-Clustering on 81x1 letter arrays')
abline(h=5.6,lty=2,col='red')
dataset <- read_csv("hidden.csv")
dataset %>%
tbl_df -> dataset
dataset <- reshape2::melt(dataset,'X1')
colnames(dataset) <- c('HiddenNode','Letter','Activation')
dataset$Letter <- factor(dataset$Letter,
levels = LETTERS[let.clust$order])
dataset$HiddenNode <- as.factor(dataset$HiddenNode)
dataset %>%
ggplot(aes(x=Letter,y=HiddenNode))+
geom_tile(aes(fill=Activation))+
geom_vline(xintercept = c(2,4,5))
dataset %>%
ggplot(aes(x=Letter,y=HiddenNode))+
geom_tile(aes(fill=Activation))+
geom_vline(xintercept = c(2,4))
dataset %>%
ggplot(aes(x=Letter,y=HiddenNode))+
geom_tile(aes(fill=Activation))+
geom_vline(xintercept = c(2.5,4.5))
dataset %>%
ggplot(aes(x=Letter,y=HiddenNode))+
geom_tile(aes(fill=Activation))+
geom_vline(xintercept = c(2.5,4.5,6.5,9.5,16.5,19.5,.24.5))
dataset %>%
ggplot(aes(x=Letter,y=HiddenNode))+
geom_tile(aes(fill=Activation))+
geom_vline(xintercept = c(2.5,4.5,6.5,9.5,16.5,19.5,24.5))
dataset %>%
ggplot(aes(x=Letter,y=HiddenNode))+
geom_tile(aes(fill=Activation))+
geom_vline(xintercept = c(2.5,4.5,6.5,9.5,16.5,19.5,24.5),col='red')
dataset %>%
ggplot(aes(x=Letter,y=HiddenNode))+
geom_tile(aes(fill=Activation))+
geom_vline(xintercept = c(2.5,4.5,6.5,9.5,16.5,19.5,24.5),col='white')
dataset %>%
ggplot(aes(x=Letter,y=HiddenNode))+
geom_tile(aes(fill=Activation))+
geom_vline(xintercept = c(2.5,4.5,6.5,9.5,16.5,19.5,24.5),col='white')+
theme_light()
dataset %>%
ggplot(aes(x=Letter,y=HiddenNode))+
geom_tile(aes(fill=Activation))+
geom_vline(xintercept = c(2.5,4.5,6.5,9.5,16.5,19.5,24.5),col='white')+
theme_minimal()
colnames(dataset) <- c('HiddenNode','Letter','Activation')
dataset$Letter <- factor(dataset$Letter,
levels = LETTERS[let.clust$order])
dataset$HiddenNode <- as.factor(dataset$HiddenNode)
dataset %>%
ggplot(aes(x=Letter,y=HiddenNode))+
geom_tile(aes(fill=Activation))+
geom_vline(xintercept = c(2.5,4.5,6.5,9.5,16.5,19.5,24.5),col='white')+
theme_minimal()
as.hclust(x = let.clust) %>%
as.dendrogram() %>%
set("labels_col",k=8) %>%
set("labels_cex", 1.6) %>% plot(main='Ward-D2 H-Clustering on 81x1 letter arrays')
abline(h=5.6,lty=2,col='red')
dataset %>%
ggplot(aes(x=Letter,y=HiddenNode))+
geom_tile(aes(fill=Activation))+
geom_vline(xintercept = c(2.5,4.5,6.5,9.5,16.5,19.5,24.5),col='white')+
theme_minimal()
